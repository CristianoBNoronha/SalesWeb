@model SalesWeb.ViewModels.ErrorViewModels.ErrorViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<hr/>
<h2 class="text-danger">An error occurred while processing your request.</h2>
<hr/>
<table class="table table-striped table-hover">
    <thead>
    <tr class="success">
        <th>
            @Html.DisplayNameFor(model => model.Errors)
        </th>
        <th></th>
    </tr>
    </thead>
    <tr></tr>
    <tbody>
    @foreach (var error in Model.Errors)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => error)
            </td>
        </tr>
    }
    </tbody>
</table>
<div>
    <a asp-controller="Home" asp-action="Index">Home</a>
</div>

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model?.ShowRequestId ?? false)
{
    <p>
        <strong>Request ID:</strong> <code>@Model?.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>


@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}